{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# PyTorch Assignment: Multi-Layer Perceptron (MLP)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**[Duke Community Standard](http://integrity.duke.edu/standard.html): By typing your name below, you are certifying that you have adhered to the Duke Community Standard in completing this assignment.**\n",
    "\n",
    "Name: LIANG LI"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Multi-Layer Perceptrons\n",
    "\n",
    "The simple logistic regression example we went over in the previous notebook is essentially a one-layer neural network, projecting straight from the input to the output predictions.\n",
    "While this can be effective for linearly separable data, occasionally a little more complexity is necessary.\n",
    "Neural networks with additional layers are typically able to learn more complex functions, leading to better performance.\n",
    "These additional layers (called \"hidden\" layers) transform the input into one or more intermediate representations before making a final prediction.\n",
    "\n",
    "In the logistic regression example, the way we performed the transformation was with a fully-connected layer, which consisted of a linear transform (matrix multiply plus a bias).\n",
    "A neural network consisting of multiple successive fully-connected layers is commonly called a Multi-Layer Perceptron (MLP). \n",
    "In the simple MLP below, a 4-d input is projected to a 5-d hidden representation, which is then projected to a single output that is used to make the final prediction.\n",
    "\n",
    "<img src=\"Figures/MLP.png\" width=\"300\"/>\n",
    "\n",
    "For the assignment, you will be building a MLP for MNIST.\n",
    "Mechanically, this is done very similary to our logistic regression example, but instead of going straight to a 10-d vector representing our output predictions, we might first transform to a 500-d vector with a \"hidden\" layer, then to the output of dimension 10.\n",
    "Before you do so, however, there's one more important thing to consider.\n",
    "\n",
    "### Nonlinearities\n",
    "\n",
    "We typically include nonlinearities between layers of a neural network.\n",
    "There's a number of reasons to do so.\n",
    "For one, without anything nonlinear between them, successive linear transforms (fully connected layers) collapse into a single linear transform, which means the model isn't any more expressive than a single layer.\n",
    "On the other hand, intermediate nonlinearities prevent this collapse, allowing neural networks to approximate more complex functions.\n",
    "\n",
    "There are a number of nonlinearities commonly used in neural networks, but one of the most popular is the [rectified linear unit (ReLU)](https://en.wikipedia.org/wiki/Rectifier_(neural_networks)):\n",
    "\n",
    "\\begin{align}\n",
    "x = \\max(0,x)\n",
    "\\end{align}\n",
    "\n",
    "There are a number of ways to implement this in PyTorch.\n",
    "We could do it with elementary PyTorch operations:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x: tensor([[ 0.9979, -0.9122, -0.2794],\n",
      "        [ 0.5542, -0.0953,  0.2236],\n",
      "        [-0.0782, -0.5950, -0.4221],\n",
      "        [ 0.2907,  0.8796, -0.6086],\n",
      "        [ 0.0210,  0.5854, -0.2948]])\n",
      "x after ReLU with max: tensor([[0.9979, 0.0000, 0.0000],\n",
      "        [0.5542, 0.0000, 0.2236],\n",
      "        [0.0000, 0.0000, 0.0000],\n",
      "        [0.2907, 0.8796, 0.0000],\n",
      "        [0.0210, 0.5854, 0.0000]])\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "\n",
    "x = torch.rand(5, 3)*2 - 1\n",
    "x_relu_max = torch.max(torch.zeros_like(x),x)\n",
    "\n",
    "print(\"x: {}\".format(x))\n",
    "print(\"x after ReLU with max: {}\".format(x_relu_max))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Of course, PyTorch also has the ReLU implemented, for example in `torch.nn.functional`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x after ReLU with nn.functional: tensor([[0.9979, 0.0000, 0.0000],\n",
      "        [0.5542, 0.0000, 0.2236],\n",
      "        [0.0000, 0.0000, 0.0000],\n",
      "        [0.2907, 0.8796, 0.0000],\n",
      "        [0.0210, 0.5854, 0.0000]])\n"
     ]
    }
   ],
   "source": [
    "import torch.nn.functional as F\n",
    "\n",
    "x_relu_F = F.relu(x)\n",
    "\n",
    "print(\"x after ReLU with nn.functional: {}\".format(x_relu_F))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Same result."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Assignment\n",
    "\n",
    "Build a 2-layer MLP for MNIST digit classfication. Feel free to play around with the model architecture and see how the training time/performance changes, but to begin, try the following:\n",
    "\n",
    "Image (784 dimensions) ->  \n",
    "fully connected layer (500 hidden units) -> nonlinearity (ReLU) ->  \n",
    "fully connected (10 hidden units) -> softmax\n",
    "\n",
    "Try building the model both with basic PyTorch operations, and then again with more object-oriented higher-level APIs. \n",
    "You should get similar results!\n",
    "\n",
    "\n",
    "*Some hints*:\n",
    "- Even as we add additional layers, we still only require a single optimizer to learn the parameters.\n",
    "Just make sure to pass all parameters to it!\n",
    "- As you'll calculate in the Short Answer, this MLP model has many more parameters than the logisitic regression example, which makes it more challenging to learn.\n",
    "To get the best performance, you may want to play with the learning rate and increase the number of training epochs.\n",
    "- Be careful using `torch.nn.CrossEntropyLoss()`. \n",
    "If you look at the [PyTorch documentation](https://pytorch.org/docs/stable/nn.html#crossentropyloss): you'll see that `torch.nn.CrossEntropyLoss()` combines the softmax operation with the cross-entropy.\n",
    "This means you need to pass in the logits (predictions pre-softmax) to this loss.\n",
    "Computing the softmax separately and feeding the result into `torch.nn.CrossEntropyLoss()` will significantly degrade your model's performance!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sequential(\n",
      "  (0): Linear(in_features=784, out_features=128, bias=True)\n",
      "  (1): ReLU()\n",
      "  (2): Linear(in_features=128, out_features=64, bias=True)\n",
      "  (3): ReLU()\n",
      "  (4): Linear(in_features=64, out_features=10, bias=True)\n",
      "  (5): Softmax(dim=1)\n",
      ")\n",
      "Linear(in_features=784, out_features=128, bias=True)\n",
      "Linear(in_features=784, out_features=128, bias=True)\n"
     ]
    }
   ],
   "source": [
    "### YOUR CODE HERE\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import torch\n",
    "from tqdm.notebook import tqdm\n",
    "from torchvision import datasets, transforms\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "\n",
    "\n",
    "from torch import nn\n",
    "class Network(nn.Module):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "        \n",
    "        # Inputs to hidden layer linear transformation\n",
    "        self.hidden = nn.Linear(784, 256)\n",
    "        # Output layer, 10 units - one for each digit\n",
    "        self.output = nn.Linear(256, 10)\n",
    "        \n",
    "        # Define sigmoid activation and softmax output \n",
    "        self.sigmoid = nn.Sigmoid()\n",
    "        self.softmax = nn.Softmax(dim=1)\n",
    "        \n",
    "    def forward(self, x):\n",
    "        # Pass the input tensor through each of our operations\n",
    "        x = self.hidden(x)\n",
    "        x = self.sigmoid(x)\n",
    "        x = self.output(x)\n",
    "        x = self.softmax(x)\n",
    "        \n",
    "        return x\n",
    "    \n",
    "# Hyperparameters for our network\n",
    "input_size = 784\n",
    "hidden_sizes = [128, 64]\n",
    "output_size = 10\n",
    "# Build a feed-forward network\n",
    "model = nn.Sequential(nn.Linear(input_size, hidden_sizes[0]),\n",
    "                      nn.ReLU(),\n",
    "                      nn.Linear(hidden_sizes[0], hidden_sizes[1]),\n",
    "                      nn.ReLU(),\n",
    "                      nn.Linear(hidden_sizes[1], output_size),\n",
    "                      nn.Softmax(dim=1))\n",
    "print(model)\n",
    "\n",
    "from collections import OrderedDict\n",
    "model = nn.Sequential(OrderedDict([\n",
    "                      ('fc1', nn.Linear(input_size, hidden_sizes[0])),\n",
    "                      ('relu1', nn.ReLU()),\n",
    "                      ('fc2', nn.Linear(hidden_sizes[0], hidden_sizes[1])),\n",
    "                      ('relu2', nn.ReLU()),\n",
    "                      ('output', nn.Linear(hidden_sizes[1], output_size)),\n",
    "                      ('softmax', nn.Softmax(dim=1))]))\n",
    "\n",
    "model\n",
    "\n",
    "print(model[0])\n",
    "print(model.fc1)\n",
    "# Make sure to print out your accuracy on the test set at the end."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import torch\n",
    "import torchvision\n",
    "import matplotlib.pyplot as plt\n",
    "from time import time\n",
    "from torchvision import datasets, transforms\n",
    "from torch import nn, optim"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "transform = transforms.Compose([transforms.ToTensor(),\n",
    "                              transforms.Normalize((0.5,), (0.5,)),\n",
    "                              ])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "from torchvision import datasets, transforms\n",
    "\n",
    "mnist_train = datasets.MNIST(root=\"./datasets\", train=True, transform=transforms.ToTensor(), download=True)\n",
    "mnist_test = datasets.MNIST(root=\"./datasets\", train=False, transform=transforms.ToTensor(), download=True)\n",
    "trainloader = torch.utils.data.DataLoader(mnist_train, batch_size=64, shuffle=True)\n",
    "valloader = torch.utils.data.DataLoader(mnist_test, batch_size=64, shuffle=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "torch.Size([64, 1, 28, 28])\n",
      "torch.Size([64])\n"
     ]
    }
   ],
   "source": [
    "dataiter = iter(trainloader)\n",
    "images, labels = dataiter.next()\n",
    "\n",
    "print(images.shape)\n",
    "print(labels.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(images[0].numpy().squeeze(), cmap='gray_r');\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 60 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "figure = plt.figure()\n",
    "num_of_images = 60\n",
    "for index in range(1, num_of_images + 1):\n",
    "    plt.subplot(6, 10, index)\n",
    "    plt.axis('off')\n",
    "    plt.imshow(images[index].numpy().squeeze(), cmap='gray_r')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sequential(\n",
      "  (0): Linear(in_features=784, out_features=128, bias=True)\n",
      "  (1): ReLU()\n",
      "  (2): Linear(in_features=128, out_features=64, bias=True)\n",
      "  (3): ReLU()\n",
      "  (4): Linear(in_features=64, out_features=10, bias=True)\n",
      "  (5): LogSoftmax()\n",
      ")\n"
     ]
    }
   ],
   "source": [
    "input_size = 784\n",
    "hidden_sizes = [128, 64]\n",
    "output_size = 10\n",
    "\n",
    "model = nn.Sequential(nn.Linear(input_size, hidden_sizes[0]),\n",
    "                      nn.ReLU(),\n",
    "                      nn.Linear(hidden_sizes[0], hidden_sizes[1]),\n",
    "                      nn.ReLU(),\n",
    "                      nn.Linear(hidden_sizes[1], output_size),\n",
    "                      nn.LogSoftmax(dim=1))\n",
    "print(model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "criterion = nn.NLLLoss()\n",
    "images, labels = next(iter(trainloader))\n",
    "images = images.view(images.shape[0], -1)\n",
    "\n",
    "logps = model(images) #log probabilities\n",
    "loss = criterion(logps, labels) #calculate the NLL loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Before backward pass: \n",
      " None\n",
      "After backward pass: \n",
      " tensor([[0., 0., 0.,  ..., 0., 0., 0.],\n",
      "        [0., 0., 0.,  ..., 0., 0., 0.],\n",
      "        [0., 0., 0.,  ..., 0., 0., 0.],\n",
      "        ...,\n",
      "        [0., 0., 0.,  ..., 0., 0., 0.],\n",
      "        [0., 0., 0.,  ..., 0., 0., 0.],\n",
      "        [0., 0., 0.,  ..., 0., 0., 0.]])\n"
     ]
    }
   ],
   "source": [
    "print('Before backward pass: \\n', model[0].weight.grad)\n",
    "loss.backward()\n",
    "print('After backward pass: \\n', model[0].weight.grad)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "optimizer = optim.SGD(model.parameters(), lr=0.003, momentum=0.9)\n",
    "time0 = time()\n",
    "epochs = 15\n",
    "for e in range(epochs):\n",
    "    running_loss = 0\n",
    "    for images, labels in trainloader:\n",
    "        # Flatten MNIST images into a 784 long vector\n",
    "        images = images.view(images.shape[0], -1)\n",
    "    \n",
    "        # Training pass\n",
    "        optimizer.zero_grad()\n",
    "        \n",
    "        output = model(images)\n",
    "        loss = criterion(output, labels)\n",
    "        \n",
    "        #This is where the model learns by backpropagating\n",
    "        loss.backward()\n",
    "        \n",
    "        #And optimizes its weights here\n",
    "        optimizer.step()\n",
    "        \n",
    "        running_loss += loss.item()\n",
    "        print(\"loss {}\".format(running_loss))\n",
    "    else:\n",
    "        print(\"Epoch {} - Training loss: {}\".format(e, running_loss/len(trainloader)))\n",
    "print(\"\\nTraining Time (in minutes) =\",(time()-time0)/60)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Short answer\n",
    "How many trainable parameters does your model have? \n",
    "How does this compare to the logisitic regression example?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "images, labels = next(iter(valloader))\n",
    "\n",
    "img = images[0].view(1, 784)\n",
    "with torch.no_grad():\n",
    "    logps = model(img)\n",
    "\n",
    "ps = torch.exp(logps)\n",
    "probab = list(ps.numpy()[0])\n",
    "print(\"Predicted Digit =\", probab.index(max(probab)))\n",
    "view_classify(img.view(1, 28, 28), ps)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "correct_count, all_count = 0, 0\n",
    "for images,labels in valloader:\n",
    "  for i in range(len(labels)):\n",
    "    img = images[i].view(1, 784)\n",
    "    with torch.no_grad():\n",
    "        logps = model(img)\n",
    "\n",
    "    \n",
    "    ps = torch.exp(logps)\n",
    "    probab = list(ps.numpy()[0])\n",
    "    pred_label = probab.index(max(probab))\n",
    "    true_label = labels.numpy()[i]\n",
    "    if(true_label == pred_label):\n",
    "      correct_count += 1\n",
    "    all_count += 1\n",
    "\n",
    "print(\"Number Of Images Tested =\", all_count)\n",
    "print(\"\\nModel Accuracy =\", (correct_count/all_count))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "`[Your answer here]`"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
